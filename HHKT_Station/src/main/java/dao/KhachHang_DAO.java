package dao;

import entity.KhachHang;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import util.JPAUtil;

import java.util.List;

public class KhachHang_DAO {
    private final EntityManager em;

    public KhachHang_DAO() {
        this.em = JPAUtil.getEntityManager();
    }

    public List<KhachHang> getAllKhachHang() {

        try {
            return em.createQuery("from KhachHang ", KhachHang.class).getResultList();
        } catch (Exception e) {
            return null;
        }
    }

    public String getAutoGeneratedId() {
        return (String) em.createNativeQuery("SELECT [dbo].[auto_idkh]()")
                .getSingleResult();
    }

    public boolean create(KhachHang khachHang) {
        return executeTransaction(() -> em.persist(khachHang));
    }

    public boolean update(KhachHang kh) {
        return executeTransaction(() -> em.merge(kh));
    }

    public boolean updateSoSDT (String maKH, String sdt) {
        return executeTransaction(() -> {
            KhachHang kh = getKhachHangTheoMaKH(maKH);
            kh.setSdt(sdt);
        });
    }

    public boolean delete(String maKH) {
        return executeTransaction(() -> {
            KhachHang kh = getKhachHangTheoMaKH(maKH);
            em.remove(kh);
        });
    }

    public KhachHang getKhachHangTheoMaKH(String maKH) {

        return em.find(KhachHang.class, maKH);
    }

    public KhachHang getKHTheoCCCD(String soCCCD) {
        String sql = "from KhachHang where soCCCD = :socccd";

        try {
            return em.createQuery(sql, KhachHang.class).setParameter("socccd", soCCCD).getSingleResult();
        } catch (Exception e) {
            return null;
        }
    }

    public KhachHang getKhachHangTheoSDT(String sdt) {
        String sql = "from KhachHang where sdt = :sdt";

        try {
            return em.createQuery(sql, KhachHang.class).setParameter("sdt", sdt).getSingleResult();
        } catch (Exception e) {
            return null;
        }
    }

    private boolean executeTransaction(Runnable action) {
        EntityTransaction transaction = em.getTransaction();
        try {
            transaction.begin();
            action.run();
            transaction.commit();
            return true;
        } catch (Exception e) {
            if (transaction.isActive()) {
                transaction.rollback();
            }
            return false;
        }
    }
}


